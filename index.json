[{"content":"最佳解法：广度优先搜素\n\u0026lt;!--more--\u0026gt;\n\n\u0026gt; 给你一个由 `\u0026#39;1\u0026#39;`（陆地）和 `\u0026#39;0\u0026#39;`（水）组成的的二维网格，请你计算网格中岛屿的数量。\n\u0026gt;\n\u0026gt; 岛屿总是被水包围，并且每座岛屿只能由水平方向或竖直方向上相邻的陆地连接形成。\n\u0026gt;\n\u0026gt; 此外，你可以假设该网格的四条边均被水包围。\n\n示例:\n\n```\n输入:\n11110\n11010\n11000\n00000\n输出: 1\n```\n\n```\n输入:\n11000\n11000\n00100\n00011\n输出: 3\n解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。\n```\n\n**思路**：\n\n- 扫描一遍整个网格，遇到陆地就对他广度优先搜索，并将搜索到的全部陆地置为`0`，这样执行搜索的次数便是岛屿的数量。\n\n- 使用队列实现广搜，按照距离根节点距离递增的顺序遍历节点，遇到陆地则该点坐标入队，同时其上一个节点坐标出队，当队列为空时搜索完成。\n- 坐标点表示使用STL容器`pair\u0026lt;int,int\u0026gt;`，头文件`utility`\n- 时间复杂度$O(MN)$，扫描二维网格的时间复杂度\n- 最坏情况为全是陆地，因此空间复杂度$O(min(M,N)$\n\n**实现**\n\n```c++\nclass Solution {\npublic:\n    int numIslands(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; grid) {\n        int nr = grid.size();\n        // 经典陷阱\n        if (nr == 0)\n            return 0;\n        int nc = grid[0].size();\n        int num = 0;\n\n        for (int r=0; r \u0026lt; nr; r++) {\n            for (int c=0; c \u0026lt; nc; c++) {\n                if (grid[r][c] == \u0026#39;1\u0026#39;) {\n                    // 遇到根节点为陆地，岛屿加一\n                    num++;\n                    grid[r][c] = \u0026#39;0\u0026#39;;\n                    // 节点坐标\n                    queue\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; q;\n                    q.push({r,c});\n                    // 广搜\n                    while(!q.empty()) {\n                        auto rc = q.front();\n                        int row = rc.first, col = rc.second;\n                        // 访问四个邻接点\n                        if (row+1 \u0026lt; nr \u0026amp;\u0026amp; grid[row+1][col] == \u0026#39;1\u0026#39;) {\n                            grid[row+1][col] = \u0026#39;0\u0026#39;;\n                            q.push({row+1,col});\n                        }\n                        if (row-1 \u0026gt;= 0 \u0026amp;\u0026amp; grid[row-1][col] == \u0026#39;1\u0026#39;) {\n                            grid[row-1][col] = \u0026#39;0\u0026#39;;\n                            q.push({row-1,col});\n                        }\n                        if (col+1 \u0026lt; nc \u0026amp;\u0026amp; grid[row][col+1] == \u0026#39;1\u0026#39;) {\n                            grid[row][col+1] = \u0026#39;0\u0026#39;;\n                            q.push({row,col+1});\n                        }\n                        if (col-1 \u0026gt;= 0 \u0026amp;\u0026amp; grid[row][col-1] == \u0026#39;1\u0026#39;) {\n                            grid[row][col-1] = \u0026#39;0\u0026#39;;\n                            q.push({row,col-1});\n                        }\n                        q.pop();\n                    }\n                }\n            }\n        }\n        return num;\n    }\n};\n```\n\n**总结**\n\n广搜的实现还是较为容易，第一次做时以为只需要向根节点右下方遍历就行了，结果遇到了特例：*工字形* 的岛屿等，如\n\n```\n111\n010\n111\n```\n\n若是只向右下方搜索就会得出岛屿为2。\n\n","date":"2020-06-28","description":"","objectID":"/200-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/","tags":"广度优先搜索\n队列","title":"#200 岛屿数量","uri":"/200-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"},{"content":"\n使用HUGO+Github Pages搭建个人博客\n\n\u0026lt;!--more--\u0026gt;\n\n## 安装HUGO\n\n由于WSL2的LocalHost和主机不一样，导致没办法本地预览，我放弃了在WSL上安装hugo，而是安装在Windows上，然后通过WSL调用`hugo.exe`来完成工作流。\n\n在 [HUGO的github仓库](https://github.com/gohugoio/hugo/) 下载windows Release版本，由于下载的很慢，我使用github镜像 [link](https://github.wuyanzheshui.workers.dev/) 来下载然后把hugo.exe的路径添加到系统环境变量。终端里执行\n\n```bash\nhugo.exe version\n```\n\n打印版本信息，一切正常。\n\n## 配置\n```bash\nhugo new site /path/to/site\n```\n\n后，将建立一个文件夹，\n\n首先要安装一个主题，我选择了`LoveIt`主题，[仓库地址](https://github.com/dillonzq/LoveIt/ )。\n\n```bash\ngit clone git@github.com:dillonzq/LoveIt.git themes/LoveIt\n```\n\n然后需要编辑`config.toml`，我直接把`/themes/LoveIt/exampleSite`里的给复制了过来，然后略加一点修改就行了。注释非常详尽，参照着改就行了。[link](https://hugoloveit.com/)的文档就更加详尽了，以后遇到坑再看吧。\n\n## 发布内容\n\n```bash\nhugo new posts/post.md\n```\n然后\n\n\n## 部署到Github Pages\n\n","date":"2020-06-24","description":"","objectID":"/hugo-go/","tags":"HUGO","title":"HUGO搭建博客","uri":"/hugo-go/"},{"content":"\n","date":"2019-08-02","description":"","objectID":"/about/","tags":"","title":"关于 Fr13ndSDP","uri":"/about/"}]